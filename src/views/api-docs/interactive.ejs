<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= texts.apiDocs.interactive.pageTitle %></title>
    <meta name="description" content="<%= texts.apiDocs.interactive.description %>">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Monaco Editor -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs/loader.min.js"></script>
    
    <style>
        .api-playground {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .playground-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            margin: 2rem;
            overflow: hidden;
        }
        
        .playground-header {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .endpoint-selector {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            padding: 1rem;
        }
        
        .endpoint-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .endpoint-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }
        
        .endpoint-card.active {
            border-color: #667eea;
            background: #f8f9ff;
        }
        
        .method-badge {
            font-weight: bold;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            margin-right: 0.5rem;
        }
        
        .method-get { background: #28a745; color: white; }
        .method-post { background: #007bff; color: white; }
        .method-put { background: #ffc107; color: black; }
        .method-delete { background: #dc3545; color: white; }
        
        .params-form {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
        }
        
        .test-button {
            background: linear-gradient(45deg, #28a745, #20c997);
            border: none;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .test-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
            color: white;
        }
        
        .response-section {
            margin-top: 2rem;
        }
        
        .response-tabs .nav-link {
            border-radius: 8px 8px 0 0;
            border: none;
            color: #6c757d;
            background: #f8f9fa;
            margin-right: 0.25rem;
        }
        
        .response-tabs .nav-link.active {
            background: #667eea;
            color: white;
        }
        
        .response-content {
            border: 1px solid #dee2e6;
            border-radius: 0 8px 8px 8px;
            min-height: 300px;
            background: #2d3748;
            color: #e2e8f0;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        }
        
        .status-indicator {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
            display: inline-block;
            margin-bottom: 1rem;
        }
        
        .status-success { background: #d4edda; color: #155724; }
        .status-error { background: #f8d7da; color: #721c24; }
        .status-pending { background: #fff3cd; color: #856404; }
        
        .code-generator {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1.5rem;
            margin-top: 1rem;
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .param-input {
            border: 2px solid #e9ecef;
            border-radius: 6px;
            transition: border-color 0.3s ease;
        }
        
        .param-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .monaco-editor-container {
            height: 300px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        }
    </style>
</head>
<body class="api-playground">
    <div class="playground-container">
        <!-- 头部 -->
        <div class="playground-header">
                            <h1><i class="fas fa-rocket"></i> <%= texts.apiDocs.interactive.platform %></h1>
            <p class="mb-0">在线测试 API 接口，生成代码示例，实时查看响应结果</p>
        </div>
        
        <!-- 端点选择器 -->
        <div class="endpoint-selector">
            <h5 class="mb-3"><i class="fas fa-list"></i> 选择 API 端点</h5>
            <div class="row" id="endpointsList">
                <!-- 动态生成的端点列表 -->
            </div>
        </div>
        
        <!-- 主要测试区域 -->
        <div class="container-fluid p-4">
            <div class="row">
                <!-- 左侧：参数设置 -->
                <div class="col-lg-6">
                    <h5><i class="fas fa-cogs"></i> 请求配置</h5>
                    
                    <!-- 当前端点信息 -->
                    <div class="card mb-3" id="currentEndpoint">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <span class="method-badge method-get" id="currentMethod">GET</span>
                                <code id="currentPath">/api/products</code>
                            </div>
                            <p class="mt-2 mb-0 text-muted" id="currentDescription">获取所有产品列表</p>
                        </div>
                    </div>
                    
                    <!-- 请求头设置 -->
                    <div class="mb-3">
                        <label class="form-label"><strong>请求头 (Headers)</strong></label>
                        <div class="params-form">
                            <div class="row mb-2">
                                <div class="col-6">
                                    <input type="text" class="form-control param-input" placeholder="Header 名称" value="Content-Type">
                                </div>
                                <div class="col-6">
                                    <input type="text" class="form-control param-input" placeholder="Header 值" value="application/json">
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-6">
                                    <input type="text" class="form-control param-input" placeholder="X-API-Key">
                                </div>
                                <div class="col-6">
                                    <input type="text" class="form-control param-input" placeholder="你的API密钥">
                                </div>
                            </div>
                            <button class="btn btn-sm btn-outline-primary" onclick="addHeaderRow()">
                                <i class="fas fa-plus"></i> 添加Header
                            </button>
                        </div>
                    </div>
                    
                    <!-- 查询参数 -->
                    <div class="mb-3">
                        <label class="form-label"><strong>查询参数 (Query Parameters)</strong></label>
                        <div class="params-form" id="queryParams">
                            <!-- 动态生成的参数表单 -->
                        </div>
                    </div>
                    
                    <!-- 请求体（POST/PUT） -->
                    <div class="mb-3" id="requestBodySection" style="display: none;">
                        <label class="form-label"><strong>请求体 (Request Body)</strong></label>
                        <div class="monaco-editor-container" id="requestBodyEditor"></div>
                    </div>
                    
                    <!-- 测试按钮 -->
                    <div class="text-center">
                        <button class="test-button" onclick="executeTest()">
                            <i class="fas fa-play"></i> 执行测试
                        </button>
                        <button class="btn btn-outline-secondary ms-2" onclick="resetForm()">
                            <i class="fas fa-redo"></i> 重置
                        </button>
                    </div>
                </div>
                
                <!-- 右侧：响应结果 -->
                <div class="col-lg-6">
                    <h5><i class="fas fa-terminal"></i> 响应结果</h5>
                    
                    <!-- 状态指示器 -->
                    <div id="statusIndicator" class="status-indicator status-pending" style="display: none;">
                        <i class="fas fa-clock"></i> 准备测试...
                    </div>
                    
                    <!-- 加载动画 -->
                    <div class="loading-spinner" id="loadingSpinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">测试中...</span>
                        </div>
                        <p class="mt-2">正在执行 API 测试...</p>
                    </div>
                    
                    <!-- 响应选项卡 -->
                    <div class="response-section" id="responseSection" style="display: none;">
                        <ul class="nav nav-tabs response-tabs" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" data-bs-toggle="tab" href="#responseBody">响应体</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" data-bs-toggle="tab" href="#responseHeaders">响应头</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" data-bs-toggle="tab" href="#requestInfo">请求信息</a>
                            </li>
                        </ul>
                        
                        <div class="tab-content">
                            <div class="tab-pane fade show active" id="responseBody">
                                <div class="response-content" id="responseBodyContent"></div>
                            </div>
                            <div class="tab-pane fade" id="responseHeaders">
                                <div class="response-content" id="responseHeadersContent"></div>
                            </div>
                            <div class="tab-pane fade" id="requestInfo">
                                <div class="response-content" id="requestInfoContent"></div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 代码生成器 -->
                    <div class="code-generator" id="codeGenerator" style="display: none;">
                        <h6><i class="fas fa-code"></i> 生成代码示例</h6>
                        <div class="btn-group mb-3" role="group">
                            <button class="btn btn-outline-primary active" onclick="generateCode('javascript')">JavaScript</button>
                            <button class="btn btn-outline-primary" onclick="generateCode('python')">Python</button>
                            <button class="btn btn-outline-primary" onclick="generateCode('curl')">cURL</button>
                            <button class="btn btn-outline-primary" onclick="generateCode('php')">PHP</button>
                        </div>
                        <div class="monaco-editor-container" id="codeOutput"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // API 端点配置
        const apiEndpoints = [
            {
                id: 'get-products',
                method: 'GET',
                path: '/api/products',
                name: '获取产品列表',
                description: '获取所有可用产品的列表信息',
                parameters: [
                    { name: 'limit', type: 'integer', required: false, description: '返回记录数量限制 (1-100)', defaultValue: '10' },
                    { name: 'offset', type: 'integer', required: false, description: '跳过记录数量', defaultValue: '0' },
                    { name: 'category', type: 'string', required: false, description: '按分类筛选' }
                ]
            },
            {
                id: 'search-products',
                method: 'GET',
                path: '/api/products/search',
                name: '搜索产品',
                description: '根据关键词搜索产品，支持全文检索和筛选功能',
                parameters: [
                    { name: 'q', type: 'string', required: true, description: '搜索关键词' },
                    { name: 'category', type: 'string', required: false, description: '产品分类筛选' },
                    { name: 'sort', type: 'string', required: false, description: '排序方式: relevance, name, date', defaultValue: 'relevance' },
                    { name: 'limit', type: 'integer', required: false, description: '返回结果数量 (1-50)', defaultValue: '10' }
                ]
            },
            {
                id: 'get-categories',
                method: 'GET',
                path: '/api/products/categories',
                name: '获取产品分类',
                description: '获取所有产品分类信息',
                parameters: []
            },
            {
                id: 'health-check',
                method: 'GET',
                path: '/api/health',
                name: '系统健康检查',
                description: '检查API服务和相关组件的健康状态',
                parameters: []
            },
            {
                id: 'api-status',
                method: 'GET',
                path: '/api/status',
                name: 'API状态',
                description: '获取API服务状态信息',
                parameters: []
            }
        ];
        
        let currentEndpointData = apiEndpoints[0];
        let requestBodyEditor = null;
        let codeOutputEditor = null;
        
        // 初始化Monaco编辑器
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.34.1/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            // 请求体编辑器
            requestBodyEditor = monaco.editor.create(document.getElementById('requestBodyEditor'), {
                value: '{\n  "example": "data"\n}',
                language: 'json',
                theme: 'vs-dark',
                minimap: { enabled: false },
                scrollBeyondLastLine: false
            });
            
            // 代码输出编辑器
            codeOutputEditor = monaco.editor.create(document.getElementById('codeOutput'), {
                value: '',
                language: 'javascript',
                theme: 'vs-dark',
                readOnly: true,
                minimap: { enabled: false },
                scrollBeyondLastLine: false
            });
        });
        
        // 初始化页面
        document.addEventListener('DOMContentLoaded', function() {
            renderEndpointsList();
            selectEndpoint(apiEndpoints[0]);
        });
        
        // 渲染端点列表
        function renderEndpointsList() {
            const container = document.getElementById('endpointsList');
            container.innerHTML = '';
            
            apiEndpoints.forEach(endpoint => {
                const card = document.createElement('div');
                card.className = 'col-md-6 col-lg-4';
                card.innerHTML = `
                    <div class="endpoint-card" onclick="selectEndpoint(${JSON.stringify(endpoint).replace(/"/g, '&quot;')})">
                        <div class="d-flex align-items-center mb-2">
                            <span class="method-badge method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
                            <code class="flex-grow-1">${endpoint.path}</code>
                        </div>
                        <h6 class="mb-1">${endpoint.name}</h6>
                        <p class="text-muted small mb-0">${endpoint.description}</p>
                    </div>
                `;
                container.appendChild(card);
            });
        }
        
        // 选择端点
        function selectEndpoint(endpoint) {
            currentEndpointData = endpoint;
            
            // 更新当前端点显示
            document.getElementById('currentMethod').textContent = endpoint.method;
            document.getElementById('currentMethod').className = `method-badge method-${endpoint.method.toLowerCase()}`;
            document.getElementById('currentPath').textContent = endpoint.path;
            document.getElementById('currentDescription').textContent = endpoint.description;
            
            // 更新端点卡片状态
            document.querySelectorAll('.endpoint-card').forEach(card => {
                card.classList.remove('active');
            });
            event?.target?.closest('.endpoint-card')?.classList.add('active');
            
            // 渲染参数表单
            renderParametersForm();
            
            // 显示/隐藏请求体部分
            const requestBodySection = document.getElementById('requestBodySection');
            if (endpoint.method === 'POST' || endpoint.method === 'PUT') {
                requestBodySection.style.display = 'block';
            } else {
                requestBodySection.style.display = 'none';
            }
        }
        
        // 渲染参数表单
        function renderParametersForm() {
            const container = document.getElementById('queryParams');
            container.innerHTML = '';
            
            if (currentEndpointData.parameters.length === 0) {
                container.innerHTML = '<p class="text-muted mb-0">此端点无需查询参数</p>';
                return;
            }
            
            currentEndpointData.parameters.forEach(param => {
                const paramDiv = document.createElement('div');
                paramDiv.className = 'mb-3';
                paramDiv.innerHTML = `
                    <label class="form-label">
                        ${param.name}
                        ${param.required ? '<span class="text-danger">*</span>' : '<span class="text-muted">(可选)</span>'}
                    </label>
                    <input type="text" 
                           class="form-control param-input" 
                           name="${param.name}"
                           placeholder="${param.description}"
                           value="${param.defaultValue || ''}"
                           ${param.required ? 'required' : ''}>
                    <small class="form-text text-muted">${param.description}</small>
                `;
                container.appendChild(paramDiv);
            });
        }
        
        // 添加请求头行
        function addHeaderRow() {
            const paramsForm = document.querySelector('.params-form');
            const newRow = document.createElement('div');
            newRow.className = 'row mb-2';
            newRow.innerHTML = `
                <div class="col-6">
                    <input type="text" class="form-control param-input" placeholder="Header 名称">
                </div>
                <div class="col-6">
                    <input type="text" class="form-control param-input" placeholder="Header 值">
                </div>
            `;
            paramsForm.insertBefore(newRow, paramsForm.lastElementChild);
        }
        
        // 执行API测试
        async function executeTest() {
            // 显示加载状态
            document.getElementById('loadingSpinner').style.display = 'block';
            document.getElementById('responseSection').style.display = 'none';
            document.getElementById('statusIndicator').style.display = 'none';
            
            try {
                // 构建请求URL
                const url = new URL(currentEndpointData.path, window.location.origin);
                
                // 添加查询参数
                const paramInputs = document.querySelectorAll('#queryParams input[name]');
                paramInputs.forEach(input => {
                    if (input.value.trim()) {
                        url.searchParams.set(input.name, input.value.trim());
                    }
                });
                
                // 构建请求头
                const headers = {};
                const headerRows = document.querySelectorAll('.params-form .row');
                headerRows.forEach(row => {
                    const nameInput = row.querySelector('input:first-child');
                    const valueInput = row.querySelector('input:last-child');
                    if (nameInput?.value && valueInput?.value) {
                        headers[nameInput.value] = valueInput.value;
                    }
                });
                
                // 构建请求选项
                const requestOptions = {
                    method: currentEndpointData.method,
                    headers: {
                        'Accept': 'application/json',
                        ...headers
                    }
                };
                
                // 添加请求体（如果需要）
                if ((currentEndpointData.method === 'POST' || currentEndpointData.method === 'PUT') && requestBodyEditor) {
                    try {
                        const bodyContent = requestBodyEditor.getValue();
                        JSON.parse(bodyContent); // 验证JSON格式
                        requestOptions.body = bodyContent;
                        requestOptions.headers['Content-Type'] = 'application/json';
                    } catch (e) {
                        throw new Error('请求体JSON格式错误');
                    }
                }
                
                // 记录请求开始时间
                const startTime = performance.now();
                
                // 发送请求
                const response = await fetch(url.toString(), requestOptions);
                const endTime = performance.now();
                const responseTime = Math.round(endTime - startTime);
                
                // 获取响应数据
                const responseText = await response.text();
                let responseData;
                try {
                    responseData = JSON.parse(responseText);
                } catch (e) {
                    responseData = responseText;
                }
                
                // 显示结果
                displayTestResult(response, responseData, requestOptions, responseTime);
                
            } catch (error) {
                displayError(error.message);
            } finally {
                document.getElementById('loadingSpinner').style.display = 'none';
            }
        }
        
        // 显示测试结果
        function displayTestResult(response, data, requestOptions, responseTime) {
            // 更新状态指示器
            const statusIndicator = document.getElementById('statusIndicator');
            statusIndicator.style.display = 'block';
            statusIndicator.className = `status-indicator ${response.ok ? 'status-success' : 'status-error'}`;
            statusIndicator.innerHTML = `
                <i class="fas ${response.ok ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                ${response.status} ${response.statusText} - ${responseTime}ms
            `;
            
            // 显示响应体
            document.getElementById('responseBodyContent').innerHTML = `
                <pre style="color: #e2e8f0; padding: 1rem; margin: 0; overflow-x: auto;">${JSON.stringify(data, null, 2)}</pre>
            `;
            
            // 显示响应头
            const responseHeaders = {};
            for (let [key, value] of response.headers.entries()) {
                responseHeaders[key] = value;
            }
            document.getElementById('responseHeadersContent').innerHTML = `
                <pre style="color: #e2e8f0; padding: 1rem; margin: 0; overflow-x: auto;">${JSON.stringify(responseHeaders, null, 2)}</pre>
            `;
            
            // 显示请求信息
            const requestInfo = {
                url: response.url,
                method: requestOptions.method,
                headers: requestOptions.headers,
                body: requestOptions.body ? JSON.parse(requestOptions.body) : null
            };
            document.getElementById('requestInfoContent').innerHTML = `
                <pre style="color: #e2e8f0; padding: 1rem; margin: 0; overflow-x: auto;">${JSON.stringify(requestInfo, null, 2)}</pre>
            `;
            
            // 显示响应区域和代码生成器
            document.getElementById('responseSection').style.display = 'block';
            document.getElementById('codeGenerator').style.display = 'block';
            
            // 生成默认的JavaScript代码
            generateCode('javascript');
        }
        
        // 显示错误
        function displayError(message) {
            const statusIndicator = document.getElementById('statusIndicator');
            statusIndicator.style.display = 'block';
            statusIndicator.className = 'status-indicator status-error';
            statusIndicator.innerHTML = `<i class="fas fa-exclamation-circle"></i> 错误: ${message}`;
        }
        
        // 生成代码示例
        function generateCode(language) {
            // 更新按钮状态
            document.querySelectorAll('.code-generator .btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // 构建请求数据
            const url = new URL(currentEndpointData.path, window.location.origin);
            const paramInputs = document.querySelectorAll('#queryParams input[name]');
            paramInputs.forEach(input => {
                if (input.value.trim()) {
                    url.searchParams.set(input.name, input.value.trim());
                }
            });
            
            let code = '';
            
            switch (language) {
                case 'javascript':
                    code = generateJavaScriptCode(url.toString());
                    break;
                case 'python':
                    code = generatePythonCode(url.toString());
                    break;
                case 'curl':
                    code = generateCurlCode(url.toString());
                    break;
                case 'php':
                    code = generatePhpCode(url.toString());
                    break;
            }
            
            if (codeOutputEditor) {
                monaco.editor.setModelLanguage(codeOutputEditor.getModel(), language === 'curl' ? 'shell' : language);
                codeOutputEditor.setValue(code);
            }
        }
        
        // 生成JavaScript代码
        function generateJavaScriptCode(url) {
            return `// 使用 fetch API
async function testApi() {
  try {
    const response = await fetch('${url}', {
      method: '${currentEndpointData.method}',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': 'YOUR_API_KEY'
      }${currentEndpointData.method === 'POST' || currentEndpointData.method === 'PUT' ? ',\n      body: JSON.stringify({\n        // 你的请求数据\n      })' : ''}
    });
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    const data = await response.json();
    console.log('Success:', data);
    return data;
  } catch (error) {
    console.error('Error:', error);
  }
}

// 调用函数
testApi();`;
        }
        
        // 生成Python代码
        function generatePythonCode(url) {
            return `import requests
import json

def test_api():
    """测试API接口"""
    url = "${url}"
    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': 'YOUR_API_KEY'
    }
    
    try:
        response = requests.${currentEndpointData.method.toLowerCase()}(
            url,
            headers=headers${currentEndpointData.method === 'POST' || currentEndpointData.method === 'PUT' ? ',\n            json={\n                # 你的请求数据\n            }' : ''}
        )
        response.raise_for_status()
        
        data = response.json()
        print('Success:', json.dumps(data, indent=2, ensure_ascii=False))
        return data
    except requests.exceptions.RequestException as e:
        print(f'Error: {e}')
        return None

# 调用函数
if __name__ == "__main__":
    test_api()`;
        }
        
        // 生成cURL代码
        function generateCurlCode(url) {
            return `# 使用 cURL 测试 API
curl -X ${currentEndpointData.method} \\
  "${url}" \\
  -H "Content-Type: application/json" \\
  -H "X-API-Key: YOUR_API_KEY"${currentEndpointData.method === 'POST' || currentEndpointData.method === 'PUT' ? ' \\\n  -d \'{\n    "example": "data"\n  }\'' : ''}`;
        }
        
        // 生成PHP代码
        function generatePhpCode(url) {
            return `<?php
// 使用 cURL 测试 API
function testApi() {
    $url = "${url}";
    $headers = [
        'Content-Type: application/json',
        'X-API-Key: YOUR_API_KEY'
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, '${currentEndpointData.method}');
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);${currentEndpointData.method === 'POST' || currentEndpointData.method === 'PUT' ? '\n    \n    $data = json_encode([\n        // 你的请求数据\n    ]);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);' : ''}
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    if ($response === FALSE) {
        echo "cURL Error: " . curl_error($ch);
        return null;
    }
    
    $data = json_decode($response, true);
    echo "HTTP Code: " . $httpCode . "\\n";
    echo "Response: " . json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    
    return $data;
}

// 调用函数
testApi();
?>`;
        }
        
        // 重置表单
        function resetForm() {
            // 重置参数输入
            document.querySelectorAll('#queryParams input').forEach(input => {
                const param = currentEndpointData.parameters.find(p => p.name === input.name);
                input.value = param?.defaultValue || '';
            });
            
            // 重置请求头
            const headerInputs = document.querySelectorAll('.params-form input');
            headerInputs.forEach((input, index) => {
                if (index === 1) input.value = 'application/json';
                else if (index === 3) input.value = '';
                else if (index > 3) input.value = '';
            });
            
            // 重置响应区域
            document.getElementById('responseSection').style.display = 'none';
            document.getElementById('codeGenerator').style.display = 'none';
            document.getElementById('statusIndicator').style.display = 'none';
        }
    </script>
</body>
</html>