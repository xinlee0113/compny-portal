<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>个人中心 - 车载应用开发服务公司</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .profile-container {
            max-width: 1000px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .profile-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .profile-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            text-align: center;
            position: relative;
        }

        .profile-avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: 6px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 3rem;
            color: white;
        }

        .profile-name {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-role {
            font-size: 1rem;
            opacity: 0.9;
            margin-bottom: 0;
        }

        .nav-tabs {
            border-bottom: 2px solid #e9ecef;
            background: white;
            padding: 0 2rem;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 1rem 2rem;
            border-radius: 0;
            position: relative;
            transition: all 0.3s ease;
        }

        .nav-tabs .nav-link:hover {
            color: #667eea;
            background: none;
            border: none;
        }

        .nav-tabs .nav-link.active {
            color: #667eea;
            background: none;
            border: none;
            border-bottom: 3px solid #667eea;
        }

        .tab-content {
            padding: 2rem;
        }

        .info-group {
            display: flex;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #f8f9fa;
        }

        .info-group:last-child {
            border-bottom: none;
        }

        .info-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            flex-shrink: 0;
        }

        .info-content {
            flex: 1;
        }

        .info-label {
            font-size: 0.875rem;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }

        .info-value {
            font-size: 1rem;
            color: #212529;
            font-weight: 500;
        }

        .edit-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 10px;
            color: white;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .edit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            color: white;
        }

        .form-control, .form-select {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            border: none;
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 500;
        }

        .password-strength {
            margin-top: 0.5rem;
        }

        .strength-bar {
            height: 6px;
            border-radius: 3px;
            background: #e9ecef;
            margin-bottom: 0.5rem;
            overflow: hidden;
        }

        .strength-fill {
            height: 100%;
            transition: all 0.3s ease;
        }

        .session-item {
            border: 1px solid #e9ecef;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .session-item:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .session-current {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.05);
        }

        .session-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .session-device {
            display: flex;
            align-items: center;
        }

        .device-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
        }

        .back-btn {
            position: absolute;
            top: 2rem;
            left: 2rem;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            border-radius: 10px;
            padding: 0.5rem 1rem;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            color: white;
            text-decoration: none;
        }

        .alert {
            border: none;
            border-radius: 10px;
            padding: 1rem 1.5rem;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            .profile-container {
                margin: 1rem auto;
                padding: 0 0.5rem;
            }
            
            .nav-tabs .nav-link {
                padding: 0.75rem 1rem;
                font-size: 0.875rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <!-- 个人资料卡片 -->
        <div class="profile-card">
            <!-- 个人资料头部 -->
            <div class="profile-header">
                <a href="/" class="back-btn">
                    <i class="fas fa-arrow-left me-2"></i>返回首页
                </a>
                <div class="profile-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="profile-name" id="profileName">加载中...</div>
                <div class="profile-role" id="profileRole">加载中...</div>
            </div>

            <!-- 导航标签 -->
            <ul class="nav nav-tabs" id="profileTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="info-tab" data-bs-toggle="tab" data-bs-target="#info" type="button" role="tab">
                        <i class="fas fa-user me-2"></i>基本信息
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="security-tab" data-bs-toggle="tab" data-bs-target="#security" type="button" role="tab">
                        <i class="fas fa-shield-alt me-2"></i>安全设置
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="sessions-tab" data-bs-toggle="tab" data-bs-target="#sessions" type="button" role="tab">
                        <i class="fas fa-devices me-2"></i>设备管理
                    </button>
                </li>
            </ul>

            <!-- 标签内容 -->
            <div class="tab-content" id="profileTabContent">
                <!-- 基本信息 -->
                <div class="tab-pane fade show active" id="info" role="tabpanel">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="mb-0">
                            <i class="fas fa-user me-2"></i>个人信息
                        </h5>
                        <button class="btn edit-btn" id="editInfoBtn">
                            <i class="fas fa-edit me-2"></i>编辑
                        </button>
                    </div>

                    <!-- 信息展示模式 -->
                    <div id="infoDisplay">
                        <div class="info-group">
                            <div class="info-icon">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="info-content">
                                <div class="info-label">用户名</div>
                                <div class="info-value" id="displayUsername">-</div>
                            </div>
                        </div>
                        <div class="info-group">
                            <div class="info-icon">
                                <i class="fas fa-envelope"></i>
                            </div>
                            <div class="info-content">
                                <div class="info-label">邮箱地址</div>
                                <div class="info-value" id="displayEmail">-</div>
                            </div>
                        </div>
                        <div class="info-group">
                            <div class="info-icon">
                                <i class="fas fa-id-card"></i>
                            </div>
                            <div class="info-content">
                                <div class="info-label">姓名</div>
                                <div class="info-value" id="displayFullName">-</div>
                            </div>
                        </div>
                        <div class="info-group">
                            <div class="info-icon">
                                <i class="fas fa-phone"></i>
                            </div>
                            <div class="info-content">
                                <div class="info-label">手机号码</div>
                                <div class="info-value" id="displayPhone">-</div>
                            </div>
                        </div>
                        <div class="info-group">
                            <div class="info-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                            <div class="info-content">
                                <div class="info-label">最后登录</div>
                                <div class="info-value" id="displayLastLogin">-</div>
                            </div>
                        </div>
                    </div>

                    <!-- 信息编辑模式 -->
                    <div id="infoEdit" style="display: none;">
                        <div id="editAlert" class="alert alert-danger d-none"></div>
                        <form id="editProfileForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="editFirstName" class="form-label">名字</label>
                                    <input type="text" class="form-control" id="editFirstName" placeholder="请输入名字">
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="editLastName" class="form-label">姓氏</label>
                                    <input type="text" class="form-control" id="editLastName" placeholder="请输入姓氏">
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="editPhone" class="form-label">手机号码</label>
                                <input type="tel" class="form-control" id="editPhone" placeholder="请输入手机号码">
                            </div>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" id="saveInfoBtn">
                                    <i class="fas fa-save me-2"></i>保存更改
                                </button>
                                <button type="button" class="btn btn-secondary" id="cancelEditBtn">
                                    <i class="fas fa-times me-2"></i>取消
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- 安全设置 -->
                <div class="tab-pane fade" id="security" role="tabpanel">
                    <h5 class="mb-4">
                        <i class="fas fa-shield-alt me-2"></i>密码与安全
                    </h5>

                    <div id="passwordAlert" class="alert alert-danger d-none"></div>
                    <div id="passwordSuccess" class="alert alert-success d-none"></div>

                    <form id="changePasswordForm">
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">当前密码</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="currentPassword" required>
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('currentPassword')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">新密码</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="newPassword" required>
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('newPassword')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="password-strength">
                                <div class="strength-bar">
                                    <div class="strength-fill" id="strengthFill"></div>
                                </div>
                                <small id="strengthText" class="text-muted">密码强度：未设置</small>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="confirmNewPassword" class="form-label">确认新密码</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="confirmNewPassword" required>
                                <button type="button" class="btn btn-outline-secondary" onclick="togglePassword('confirmNewPassword')">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary" id="changePasswordBtn">
                            <i class="fas fa-key me-2"></i>修改密码
                        </button>
                    </form>
                </div>

                <!-- 设备管理 -->
                <div class="tab-pane fade" id="sessions" role="tabpanel">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="mb-0">
                            <i class="fas fa-devices me-2"></i>登录设备
                        </h5>
                        <button class="btn btn-outline-danger" id="logoutAllBtn">
                            <i class="fas fa-sign-out-alt me-2"></i>退出所有设备
                        </button>
                    </div>

                    <div id="sessionsContainer">
                        <div class="text-center py-4">
                            <i class="fas fa-spinner fa-spin fa-2x text-muted mb-3"></i>
                            <p class="text-muted">加载设备信息中...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        class ProfileManager {
            constructor() {
                this.user = null;
                this.sessions = [];
                this.init();
            }

            async init() {
                await this.loadUserProfile();
                this.bindEvents();
            }

            async loadUserProfile() {
                try {
                    const response = await fetch('/api/auth/profile', {
                        headers: {
                            'Authorization': `Bearer ${this.getToken()}`
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        this.user = result.data.user;
                        this.updateProfileDisplay();
                    } else if (response.status === 401) {
                        this.redirectToLogin();
                    }
                } catch (error) {
                    console.error('加载用户资料失败:', error);
                }
            }

            updateProfileDisplay() {
                if (!this.user) return;

                // 更新头部信息
                document.getElementById('profileName').textContent = 
                    this.user.firstName && this.user.lastName 
                        ? `${this.user.lastName}${this.user.firstName}`
                        : this.user.username;
                
                document.getElementById('profileRole').textContent = this.getRoleText(this.user.role);

                // 更新详细信息
                document.getElementById('displayUsername').textContent = this.user.username;
                document.getElementById('displayEmail').textContent = this.user.email;
                document.getElementById('displayFullName').textContent = 
                    this.user.firstName && this.user.lastName 
                        ? `${this.user.lastName}${this.user.firstName}`
                        : '未设置';
                document.getElementById('displayPhone').textContent = this.user.phone || '未设置';
                document.getElementById('displayLastLogin').textContent = 
                    this.user.lastLogin ? new Date(this.user.lastLogin).toLocaleString('zh-CN') : '未知';
            }

            getRoleText(role) {
                const roleMap = {
                    'admin': '系统管理员',
                    'manager': '部门经理', 
                    'employee': '普通员工',
                    'user': '注册用户'
                };
                return roleMap[role] || '未知角色';
            }

            bindEvents() {
                // 编辑信息
                document.getElementById('editInfoBtn').addEventListener('click', () => this.enterEditMode());
                document.getElementById('cancelEditBtn').addEventListener('click', () => this.exitEditMode());
                document.getElementById('editProfileForm').addEventListener('submit', (e) => this.handleProfileUpdate(e));

                // 修改密码
                document.getElementById('changePasswordForm').addEventListener('submit', (e) => this.handlePasswordChange(e));
                document.getElementById('newPassword').addEventListener('input', (e) => this.checkPasswordStrength(e.target.value));

                // 设备管理
                document.getElementById('logoutAllBtn').addEventListener('click', () => this.handleLogoutAll());

                // 标签切换事件
                document.getElementById('sessions-tab').addEventListener('shown.bs.tab', () => this.loadSessions());
            }

            enterEditMode() {
                document.getElementById('infoDisplay').style.display = 'none';
                document.getElementById('infoEdit').style.display = 'block';
                document.getElementById('editInfoBtn').style.display = 'none';

                // 填充当前信息
                document.getElementById('editFirstName').value = this.user.firstName || '';
                document.getElementById('editLastName').value = this.user.lastName || '';
                document.getElementById('editPhone').value = this.user.phone || '';
            }

            exitEditMode() {
                document.getElementById('infoDisplay').style.display = 'block';
                document.getElementById('infoEdit').style.display = 'none';
                document.getElementById('editInfoBtn').style.display = 'inline-block';
                this.hideAlert('editAlert');
            }

            async handleProfileUpdate(e) {
                e.preventDefault();
                
                const formData = {
                    firstName: document.getElementById('editFirstName').value.trim(),
                    lastName: document.getElementById('editLastName').value.trim(),
                    phone: document.getElementById('editPhone').value.trim()
                };

                // 移除空值
                Object.keys(formData).forEach(key => {
                    if (!formData[key]) delete formData[key];
                });

                if (Object.keys(formData).length === 0) {
                    this.showAlert('editAlert', '请至少修改一项信息', 'danger');
                    return;
                }

                try {
                    this.setLoading('saveInfoBtn', true);
                    
                    const response = await fetch('/api/auth/profile', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.getToken()}`
                        },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        this.user = result.data.user;
                        this.updateProfileDisplay();
                        this.exitEditMode();
                        this.showAlert('editAlert', '个人信息更新成功！', 'success');
                    } else {
                        this.showAlert('editAlert', result.message || '更新失败', 'danger');
                    }
                } catch (error) {
                    this.showAlert('editAlert', '网络错误，请稍后重试', 'danger');
                } finally {
                    this.setLoading('saveInfoBtn', false);
                }
            }

            async handlePasswordChange(e) {
                e.preventDefault();
                
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                if (newPassword !== confirmNewPassword) {
                    this.showAlert('passwordAlert', '新密码确认不匹配', 'danger');
                    return;
                }

                if (newPassword.length < 6) {
                    this.showAlert('passwordAlert', '新密码长度至少6位', 'danger');
                    return;
                }

                try {
                    this.setLoading('changePasswordBtn', true);
                    
                    const response = await fetch('/api/auth/change-password', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.getToken()}`
                        },
                        body: JSON.stringify({
                            currentPassword,
                            newPassword,
                            confirmNewPassword
                        })
                    });

                    const result = await response.json();

                    if (response.ok) {
                        this.showAlert('passwordSuccess', '密码修改成功！', 'success');
                        document.getElementById('changePasswordForm').reset();
                        this.resetPasswordStrength();
                    } else {
                        this.showAlert('passwordAlert', result.message || '密码修改失败', 'danger');
                    }
                } catch (error) {
                    this.showAlert('passwordAlert', '网络错误，请稍后重试', 'danger');
                } finally {
                    this.setLoading('changePasswordBtn', false);
                }
            }

            checkPasswordStrength(password) {
                const strengthFill = document.getElementById('strengthFill');
                const strengthText = document.getElementById('strengthText');
                
                let strength = 0;
                let strengthLevel = '';
                let color = '';

                if (password.length >= 6) strength += 1;
                if (password.match(/[a-z]/)) strength += 1;
                if (password.match(/[A-Z]/)) strength += 1;
                if (password.match(/[0-9]/)) strength += 1;
                if (password.match(/[^a-zA-Z0-9]/)) strength += 1;

                switch (strength) {
                    case 0:
                    case 1:
                        strengthLevel = '很弱';
                        color = '#dc3545';
                        break;
                    case 2:
                        strengthLevel = '较弱';
                        color = '#fd7e14';
                        break;
                    case 3:
                        strengthLevel = '一般';
                        color = '#ffc107';
                        break;
                    case 4:
                        strengthLevel = '较强';
                        color = '#20c997';
                        break;
                    case 5:
                        strengthLevel = '很强';
                        color = '#28a745';
                        break;
                }

                const percentage = (strength / 5) * 100;
                strengthFill.style.width = percentage + '%';
                strengthFill.style.backgroundColor = color;
                strengthText.textContent = `密码强度：${strengthLevel}`;
                strengthText.style.color = color;
            }

            resetPasswordStrength() {
                const strengthFill = document.getElementById('strengthFill');
                const strengthText = document.getElementById('strengthText');
                
                strengthFill.style.width = '0%';
                strengthText.textContent = '密码强度：未设置';
                strengthText.style.color = '#6c757d';
            }

            async loadSessions() {
                try {
                    const response = await fetch('/api/auth/sessions', {
                        headers: {
                            'Authorization': `Bearer ${this.getToken()}`
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        this.sessions = result.data.sessions;
                        this.renderSessions();
                    }
                } catch (error) {
                    console.error('加载会话失败:', error);
                    document.getElementById('sessionsContainer').innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-exclamation-triangle fa-2x text-warning mb-3"></i>
                            <p class="text-muted">加载设备信息失败</p>
                        </div>
                    `;
                }
            }

            renderSessions() {
                const container = document.getElementById('sessionsContainer');
                
                if (this.sessions.length === 0) {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-mobile-alt fa-2x text-muted mb-3"></i>
                            <p class="text-muted">暂无登录设备</p>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = this.sessions.map(session => `
                    <div class="session-item ${session.current ? 'session-current' : ''}">
                        <div class="session-header">
                            <div class="session-device">
                                <div class="device-icon">
                                    <i class="fas fa-${this.getDeviceIcon(session.deviceType)}"></i>
                                </div>
                                <div>
                                    <div class="fw-bold">${session.browser} - ${session.os}</div>
                                    <small class="text-muted">${session.ipAddress}</small>
                                </div>
                            </div>
                            <div class="text-end">
                                ${session.current ? '<span class="badge bg-success">当前设备</span>' : 
                                  `<button class="btn btn-outline-danger btn-sm" onclick="profileManager.revokeSession('${session.id}')">
                                     <i class="fas fa-times me-1"></i>移除
                                   </button>`}
                            </div>
                        </div>
                        <div class="row text-muted small">
                            <div class="col-6">
                                <i class="fas fa-clock me-1"></i>
                                最后活动：${new Date(session.lastActivity).toLocaleString('zh-CN')}
                            </div>
                            <div class="col-6">
                                <i class="fas fa-calendar me-1"></i>
                                登录时间：${new Date(session.createdAt).toLocaleString('zh-CN')}
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            getDeviceIcon(deviceType) {
                const iconMap = {
                    'desktop': 'desktop',
                    'mobile': 'mobile-alt',
                    'tablet': 'tablet-alt'
                };
                return iconMap[deviceType] || 'laptop';
            }

            async revokeSession(sessionId) {
                if (!confirm('确定要移除此设备吗？')) return;

                try {
                    const response = await fetch(`/api/auth/sessions/${sessionId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${this.getToken()}`
                        }
                    });

                    if (response.ok) {
                        this.loadSessions(); // 重新加载会话列表
                    }
                } catch (error) {
                    console.error('移除设备失败:', error);
                }
            }

            async handleLogoutAll() {
                if (!confirm('确定要退出所有设备吗？此操作将会导致您需要重新登录。')) return;

                try {
                    const response = await fetch('/api/auth/logout-all', {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${this.getToken()}`
                        }
                    });

                    if (response.ok) {
                        alert('已成功退出所有设备');
                        this.redirectToLogin();
                    }
                } catch (error) {
                    console.error('退出所有设备失败:', error);
                }
            }

            getToken() {
                return localStorage.getItem('accessToken') || 
                       document.cookie.replace(/(?:(?:^|.*;\s*)accessToken\s*\=\s*([^;]*).*$)|^.*$/, "$1");
            }

            redirectToLogin() {
                localStorage.removeItem('accessToken');
                localStorage.removeItem('refreshToken');
                window.location.href = '/auth/login';
            }

            showAlert(elementId, message, type) {
                const alert = document.getElementById(elementId);
                alert.className = `alert alert-${type}`;
                alert.textContent = message;
                alert.classList.remove('d-none');
                
                setTimeout(() => {
                    alert.classList.add('d-none');
                }, 5000);
            }

            hideAlert(elementId) {
                document.getElementById(elementId).classList.add('d-none');
            }

            setLoading(buttonId, loading) {
                const button = document.getElementById(buttonId);
                if (loading) {
                    button.disabled = true;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>处理中...';
                } else {
                    button.disabled = false;
                    // 恢复原始内容
                    if (buttonId === 'saveInfoBtn') {
                        button.innerHTML = '<i class="fas fa-save me-2"></i>保存更改';
                    } else if (buttonId === 'changePasswordBtn') {
                        button.innerHTML = '<i class="fas fa-key me-2"></i>修改密码';
                    }
                }
            }
        }

        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = input.nextElementSibling.querySelector('i');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.className = 'fas fa-eye-slash';
            } else {
                input.type = 'password';
                icon.className = 'fas fa-eye';
            }
        }

        // 初始化个人中心管理器
        let profileManager;
        document.addEventListener('DOMContentLoaded', () => {
            profileManager = new ProfileManager();
        });
    </script>
</body>
</html>