<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= texts.auth.login.pageTitle %></title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Font Awesome Icons -->
  <link href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css" rel="stylesheet">
  
  <style>
    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .login-container {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      padding: 2rem;
      width: 100%;
      max-width: 400px;
    }
    
    .login-header {
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .login-header h1 {
      color: #333;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    
    .login-header p {
      color: #666;
      margin: 0;
    }
    
    .form-floating {
      margin-bottom: 1rem;
    }
    
    .form-control {
      border: 2px solid #e9ecef;
      border-radius: 10px;
      padding: 0.75rem 1rem;
      font-size: 1rem;
      transition: all 0.3s ease;
    }
    
    .form-control:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    
    .btn-login {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border: none;
      border-radius: 10px;
      padding: 0.75rem 2rem;
      font-size: 1.1rem;
      font-weight: 600;
      color: white;
      width: 100%;
      transition: all 0.3s ease;
    }
    
    .btn-login:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      color: white;
    }
    
    .btn-login:disabled {
      opacity: 0.6;
      transform: none;
      box-shadow: none;
    }
    
    .alert {
      border-radius: 10px;
      border: none;
    }
    
    .form-check {
      margin: 1rem 0;
    }
    
    .form-check-input:checked {
      background-color: #667eea;
      border-color: #667eea;
    }
    
    .links {
      text-align: center;
      margin-top: 1.5rem;
    }
    
    .links a {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }
    
    .links a:hover {
      text-decoration: underline;
    }
    
    .loading-spinner {
      display: none;
    }
    
    .input-group-text {
      background: transparent;
      border: 2px solid #e9ecef;
      border-right: none;
      border-radius: 10px 0 0 10px;
    }
    
    .input-group .form-control {
      border-left: none;
      border-radius: 0 10px 10px 0;
    }
    
    .password-toggle {
      background: transparent;
      border: 2px solid #e9ecef;
      border-left: none;
      border-radius: 0 10px 10px 0;
      cursor: pointer;
    }
    
    .back-home {
      position: absolute;
      top: 20px;
      left: 20px;
      color: white;
      font-size: 1.2rem;
      text-decoration: none;
    }
    
    .back-home:hover {
      color: #f8f9fa;
    }
  </style>
</head>
<body>
  <!-- 返回首页按钮 -->
  <a href="/" class="back-home">
    <i class="fas fa-arrow-left"></i> 返回首页
  </a>

  <div class="login-container">
    <!-- 登录表单头部 -->
    <div class="login-header">
      <h1><i class="fas fa-user-circle"></i> 用户登录</h1>
                          <p><%= texts.auth.login.welcome %></p>
    </div>
    
    <!-- 错误提示 -->
    <div id="errorAlert" class="alert alert-danger d-none" role="alert">
      <i class="fas fa-exclamation-triangle"></i>
      <span id="errorMessage"></span>
    </div>
    
    <!-- 成功提示 -->
    <div id="successAlert" class="alert alert-success d-none" role="alert">
      <i class="fas fa-check-circle"></i>
      <span id="successMessage"></span>
    </div>
    
    <!-- 登录表单 -->
    <form id="loginForm">
      <!-- 用户名/邮箱输入 -->
      <div class="input-group mb-3">
        <span class="input-group-text">
          <i class="fas fa-user"></i>
        </span>
        <input 
          type="text" 
          class="form-control" 
          id="login" 
          name="login"
          placeholder="用户名或邮箱地址"
          required
          autocomplete="username"
        >
      </div>
      
      <!-- 密码输入 -->
      <div class="input-group mb-3">
        <span class="input-group-text">
          <i class="fas fa-lock"></i>
        </span>
        <input 
          type="password" 
          class="form-control" 
          id="password" 
          name="password"
          placeholder="密码"
          required
          autocomplete="current-password"
        >
        <span class="input-group-text password-toggle" onclick="togglePassword()">
          <i class="fas fa-eye" id="passwordToggleIcon"></i>
        </span>
      </div>
      
      <!-- 记住我选项 -->
      <div class="form-check">
        <input class="form-check-input" type="checkbox" id="rememberMe" name="rememberMe">
        <label class="form-check-label" for="rememberMe">
          记住我
        </label>
      </div>
      
      <!-- 登录按钮 -->
      <button type="submit" class="btn btn-login" id="loginBtn">
        <span class="loading-spinner">
          <i class="fas fa-spinner fa-spin"></i>
        </span>
        <span class="btn-text">登录</span>
      </button>
    </form>
    
    <!-- 链接 -->
    <div class="links">
      <div class="mb-2">
        <a href="/auth/register">还没有账户？立即注册</a>
      </div>
      <div>
        <a href="/auth/forgot-password">忘记密码？</a>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // 登录表单处理
    class LoginForm {
      constructor() {
        this.form = document.getElementById('loginForm');
        this.loginBtn = document.getElementById('loginBtn');
        this.loadingSpinner = this.loginBtn.querySelector('.loading-spinner');
        this.btnText = this.loginBtn.querySelector('.btn-text');
        
        this.initEventListeners();
        this.checkAuthStatus();
      }
      
      initEventListeners() {
        this.form.addEventListener('submit', this.handleSubmit.bind(this));
        
        // 输入框实时验证
        const inputs = this.form.querySelectorAll('input[required]');
        inputs.forEach(input => {
          input.addEventListener('input', this.validateInput.bind(this));
          input.addEventListener('blur', this.validateInput.bind(this));
        });
      }
      
      async handleSubmit(e) {
        e.preventDefault();
        
        if (!this.validateForm()) {
          return;
        }
        
        this.setLoading(true);
        this.hideAlerts();
        
        const formData = new FormData(this.form);
        const loginData = {
          login: formData.get('login'),
          password: formData.get('password'),
          rememberMe: formData.has('rememberMe')
        };
        
        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(loginData)
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            this.showSuccess('登录成功！正在跳转...');
            
            // 登录成功，延迟跳转
            setTimeout(() => {
              const redirect = new URLSearchParams(window.location.search).get('redirect');
              window.location.href = redirect || '/';
            }, 1500);
            
          } else {
            this.showError(result.message || '登录失败，请检查用户名和密码');
          }
          
        } catch (error) {
          console.error('登录请求失败:', error);
          this.showError('网络连接失败，请检查网络连接后重试');
        } finally {
          this.setLoading(false);
        }
      }
      
      validateForm() {
        const login = document.getElementById('login').value.trim();
        const password = document.getElementById('password').value;
        
        if (!login) {
          this.showError('请输入用户名或邮箱');
          return false;
        }
        
        if (!password) {
          this.showError('请输入密码');
          return false;
        }
        
        if (password.length < 6) {
          this.showError('密码至少需要6个字符');
          return false;
        }
        
        return true;
      }
      
      validateInput(e) {
        const input = e.target;
        const value = input.value.trim();
        
        input.classList.remove('is-invalid', 'is-valid');
        
        if (input.hasAttribute('required') && !value) {
          input.classList.add('is-invalid');
        } else if (value) {
          // 邮箱格式验证
          if (input.type === 'email' || (input.name === 'login' && value.includes('@'))) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (value.includes('@') && !emailRegex.test(value)) {
              input.classList.add('is-invalid');
            } else {
              input.classList.add('is-valid');
            }
          } else {
            input.classList.add('is-valid');
          }
        }
      }
      
      setLoading(loading) {
        this.loginBtn.disabled = loading;
        if (loading) {
          this.loadingSpinner.style.display = 'inline-block';
          this.btnText.textContent = '登录中...';
        } else {
          this.loadingSpinner.style.display = 'none';
          this.btnText.textContent = '登录';
        }
      }
      
      showError(message) {
        const errorAlert = document.getElementById('errorAlert');
        const errorMessage = document.getElementById('errorMessage');
        
        errorMessage.textContent = message;
        errorAlert.classList.remove('d-none');
        
        // 自动隐藏错误提示
        setTimeout(() => {
          errorAlert.classList.add('d-none');
        }, 5000);
      }
      
      showSuccess(message) {
        const successAlert = document.getElementById('successAlert');
        const successMessage = document.getElementById('successMessage');
        
        successMessage.textContent = message;
        successAlert.classList.remove('d-none');
      }
      
      hideAlerts() {
        document.getElementById('errorAlert').classList.add('d-none');
        document.getElementById('successAlert').classList.add('d-none');
      }
      
      async checkAuthStatus() {
        try {
          const response = await fetch('/api/auth/status');
          const result = await response.json();
          
          if (result.success && result.data.authenticated) {
            // 用户已登录，显示提示
            this.showSuccess(`您已登录为 ${result.data.user.username}`);
            
            setTimeout(() => {
              window.location.href = '/';
            }, 2000);
          }
        } catch (error) {
          // 忽略检查失败
          console.warn('认证状态检查失败:', error);
        }
      }
    }
    
    // 密码显示/隐藏切换
    function togglePassword() {
      const passwordInput = document.getElementById('password');
      const toggleIcon = document.getElementById('passwordToggleIcon');
      
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        toggleIcon.classList.remove('fa-eye');
        toggleIcon.classList.add('fa-eye-slash');
      } else {
        passwordInput.type = 'password';
        toggleIcon.classList.remove('fa-eye-slash');
        toggleIcon.classList.add('fa-eye');
      }
    }
    
    // 初始化登录表单
    document.addEventListener('DOMContentLoaded', () => {
      new LoginForm();
    });
  </script>
</body>
</html>